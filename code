import cv2
import os, os.path
import numpy as np

people = ["", "The Top Model", "cuta Mumma"]

def detect_face(img):
	gray_img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
	face_cascade= cv2.CascadeClassifier('opencv-files/lbpcascade_frontalface.xml')
	faces= face_cascade.detectMultiScale(gray_img, scaleFactor= 1.2, minNeighbors=5)
	if(len(faces) == 0):
		return None, None
	x,y,w,h = faces[0];
	return gray[y:y+w, x:x+h], faces[0]

def prepare_training_data(data_path):
	dirs= os.listdir(data_path)
	faces = []
	labels= []
	for dir_name in dirs:
		if not dir_name.startwith("s"):
			continue;
		label= int(dir_name.replace("s", ""))
		sub_dir_path = data_path + "/" + dir_name
		sub_img_names= os.listdir(sub_dir_path)
		for img_name in sub_img_names:
			if(img_name.startswith(".")):
				continue;
			img_path = sub_dir_path + "/" + img_name
			img= cv2.imread(img_path)
			cv2.imshow("images getting trained...", img)
			cv2.waitKey(100)
			face, rect = detect_face(img)
			if face is not None:
				faces.append(face)
				labels.append(label)
	cv2.destroyAllWindows()
	cv2.waitKey(1)
	cv2.destroyAllWindows()
	return faces, label

def draw_rect(img, rect):
	x,y,w,h = rect
	cv2.rectangle(img, (x,y), (x+w, y+h), (0,255,0), 2)

def draw_text(img, text, x,y):
	cv2.putText(img,text,(x,y),cv2.FONT_HERSHLEY_PLAIN, 1.5,(0,255,0),2)

def predict(test_img):
	img = test_img.copy()
	gray_face, orig_face = detect_face(img)
	label= face_recognizer.predict(gray_face)
	label_name= people[label]
	draw_rect(img, orig_face)
	draw_text(img, label_name, orig_face[0], orig_face[1]-5)
	return img


print("training started")
faces, label= prepare_training_data('C:\Users\dhriti\Desktop\training_data')
print("training done")

face_recognizer = cv2.face.createLBPHFaceREcognizer()
face_recognizer.train(faces,np,array(labels))

print("start testing")
cap = cv2.VideoCapture(0)
while 1:
	ret_val, img = cap.read()
	predicted_img = predict(im)
	print("prediction completed")

	cv2.imshow('Output Image', predicted_img)
	cv2.waitKey(0)
	cv2.destroyAllWindows()

cap.release()
cv2.destroyAllWindows()
